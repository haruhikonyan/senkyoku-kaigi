// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Composer {
  id                Int                        @id @default(autoincrement())
  displayName       String
  fullName          String                     @unique
  description       String?                    @db.Text
  author            String
  isTopPageLinked   Boolean                    @default(false)
  composerCountries ComposerCountriesCountry[]
  tunes             Tune[]
}

model ComposerCountriesCountry {
  composerId Int
  countryId  Int
  composer   Composer @relation(fields: [composerId], references: [id])
  country    Country  @relation(fields: [countryId], references: [id])

  @@id([composerId, countryId])
  @@index([composerId])
  @@index([countryId])
}

model Country {
  id                Int                        @id @default(autoincrement())
  name              String                     @unique
  description       String?                    @db.Text
  composerCountries ComposerCountriesCountry[]
}

model Genre {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  isTopPageLinked Boolean           @default(false)
  description     String?           @db.Text
  tuneGenres      TuneGenresGenre[]
}

model Playstyle {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  sortOrder   Int     @unique
  description String? @db.Text
  tunes       Tune[]
}

model Tune {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now()) @db.DateTime(0)
  updatedAt    DateTime          @default(now()) @db.DateTime(0)
  title        String
  author       String
  description  String?           @db.Text
  wikipedia_ja String?
  wikipedia_en String?
  imslp        String?
  timeMinutes  Int               @default(0)
  key          String?
  composerId   Int
  playstyleId  Int
  playstyle    Playstyle         @relation(fields: [playstyleId], references: [id])
  composer     Composer          @relation(fields: [composerId], references: [id])
  tuneGenres   TuneGenresGenre[]
  tuneParts    TunePart[]

  @@unique([title, playstyleId, composerId])
  @@index([playstyleId])
  @@index([composerId])
}

model TuneGenresGenre {
  tuneId  Int
  genreId Int
  tune    Tune  @relation(fields: [tuneId], references: [id])
  genre   Genre @relation(fields: [genreId], references: [id])

  @@id([tuneId, genreId])
  @@index([tuneId])
  @@index([genreId])
}

// 金管とか
model PartGroupCategory {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  partGroups PartGroup[]
}

// フルートパートとかトランペットパートとか
model PartGroup {
  id                  Int               @id @default(autoincrement())
  name                String            @unique
  shortName           String            @unique
  sortOrder           Int               @unique
  partGroupCategoryId Int
  partGroupCategory   PartGroupCategory @relation(fields: [partGroupCategoryId], references: [id])
  tuneParts           TunePart[]

  @@index([partGroupCategoryId])
}

// 曲にどういうパートがいるか、パートをまとめるもの
model TunePart {
  id          Int       @id @default(autoincrement())
  numberOfPeople Int?
  tuneId      Int
  partGroupId Int
  tune        Tune      @relation(fields: [tuneId], references: [id])
  partGroup   PartGroup @relation(fields: [partGroupId], references: [id])
  parts       Part[]

  @@index([tuneId])
  @@index([partGroupId])
}

// イメージはパート譜1つ
model Part {
  id                 Int                 @id @default(autoincrement())
  partName           String
  tunePartId         Int
  mainInstrumentId   Int
  useMute            Boolean             @default(false)
  TunePart           TunePart            @relation(fields: [tunePartId], references: [id])
  mainInstrument     Instrument          @relation(fields: [mainInstrumentId], references: [id])
  partSubInstruments PartSubInstrument[]

  @@index([tunePartId])
  @@index([mainInstrumentId])
}

// 持ち替えの中間テーブル
model PartSubInstrument {
  partId       Int
  instrumentId Int
  part         Part       @relation(fields: [partId], references: [id])
  instrument   Instrument @relation(fields: [instrumentId], references: [id])

  @@id([partId, instrumentId])
  @@index([partId])
  @@index([instrumentId])
}

// 楽器。特殊楽器も含む
model Instrument {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  shortName         String              @unique
  description       String?             @db.Text
  sortOrder         Int                 @unique
  parts             Part[]
  partSubInstrument PartSubInstrument[]
}
